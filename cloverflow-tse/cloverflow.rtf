{\rtf1\ansi\uc1\deff0\deflang1024
{\fonttbl{\f0\fnil\fcharset0 Times New Roman;}
{\f1\fnil\fcharset0 Arial;}
{\f2\fnil\fcharset0 Arial;}
{\f3\fnil\fcharset0 Courier New;}
{\f4\fnil\fcharset0 Zapf Chancery;}
{\f5\fnil\fcharset0 STIXGeneral;}
{\f6\fnil\fcharset0 MS Gothic;}
}
{\colortbl;
\red0\green0\blue0;
\red0\green0\blue255;
\red0\green255\blue255;
\red0\green255\blue0;
\red255\green0\blue255;
\red255\green0\blue0;
\red255\green255\blue0;
\red255\green255\blue255;
}
{\stylesheet
{\s0\qj\widctlpar\f0\fs20 \snext0 Normal;}
{\cs10 \additive\ssemihidden Default Paragraph Font;}
{\s1\qc\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 Part;}
{\s2\ql\sb240\sa120\keepn\f0\b\fs40 \sbasedon0\snext0 heading 1;}
{\s3\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 2;}
{\s4\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext0 heading 3;}
{\s5\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 4;}
{\s6\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 5;}
{\s7\ql\sb240\sa120\keepn\f0\b\fs24 \sbasedon0\snext0 heading 6;}
{\s8\qr\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext8 rightpar;}
{\s9\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext9 centerpar;}
{\s10\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext10 leftpar;}
{\s11\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equation;}
{\s12\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationNum;}
{\s13\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlign;}
{\s14\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationAlignNum;}
{\s15\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArray;}
{\s16\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 equationArrayNum;}
{\s17\ql\sb120\sa120\keep\widctlpar\f0\fs20 \sbasedon0\snext0 theorem;}
{\s18\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 bitmapCenter;}
{\s20\qc\sb240\sa240\b\f0\fs36 \sbasedon0\snext21 Title;}
{\s21\qc\sa120\f0\fs20 \sbasedon0\snext0 author;}
{\s22\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext22 footer;}
{\s23\ql\tqc\tx4536\tqr\tx9072\f0\fs20 \sbasedon0\snext23 header;}
{\s30\ql\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 caption;}
{\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext0 Figure;}
{\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext32 Table;}
{\s33\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext33 Tabular;}
{\s34\qc\sb120\sa0\keep\widctlpar\f0\fs20 \sbasedon0\snext34 Tabbing;}
{\s35\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext35 Quote;}
{\s38\ql\widctlpar\f3\fs20 \snext38 verbatim;}
{\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext46 List;}
{\s47\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext47 List 1;}
{\s50\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 latex picture;}
{\s51\qc\sb120\sa120\keep\widctlpar\f0 \sbasedon0\snext0 subfigure;}
{\s61\ql\sb240\sa120\keepn\f0\b\fs32 \sbasedon0\snext62 bibheading;}
{\s62\ql\fi-567\li567\sb0\sa0\f0\fs20 \sbasedon0\snext62 bibitem;}
{\s64\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20 \sbasedon0\snext64 endnotes;}
{\s65\ql\fi-113\li397\lin397\f0\fs20 \sbasedon0\snext65 footnote text;}
{\s66\qj\fi-170\li454\lin454\f0\fs20 \sbasedon0\snext66 endnote text;}
{\cs62\super \additive\sbasedon10 footnote reference;}
{\cs63\super \additive\sbasedon10 endnote reference;}
{\s67\ql\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext67 acronym;}
{\s70\qc\sa120\b\f0\fs20 \sbasedon0\snext71 abstract title;}
{\s71\qj\li1024\ri1024\fi340\widctlpar\f0\fs20 \sbasedon0\snext0 abstract;}
{\s80\ql\sb240\sa120\keepn\f0\b\fs20 \sbasedon0\snext0 contents_heading;}
{\s81\ql\li425\tqr\tldot\tx8222\sb240\sa60\keepn\f0\fs20\b \sbasedon0\snext82 toc 1;}
{\s82\ql\li512\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext83 toc 2;}
{\s83\ql\li1024\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext84 toc 3;}
{\s84\ql\li1536\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext85 toc 4;}
{\s85\ql\li2048\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext86 toc 5;}
{\s86\ql\li2560\tqr\tldot\tx8222\sb60\sa60\keepn\f0\fs20 \sbasedon0\snext86 toc 6;}
}
{\info
{\title Original file was cloverflow.tex}
{\doccomm Created using latex2rtf 2.3.16 r1254 (released May 12 2017) on Thu May 24 12:07:53 2018
}
}
{\footer\pard\plain\f0\fs20\qc\chpgn\par}
\paperw12280\paperh15900\margl2680\margr2700\margt2540\margb1760\pgnstart0\widowctrl\qj\ftnbj\f0\aftnnar
{\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 {{\par
\pard\plain\s70\qc\sa120\b\f0\fs20\sl240\slmult1 \fi300 Abstract\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li1024\ri1024\fi300  Online code clones are code fragments that are copied from software projects or online sources to Stack Overflow as examples. Due to an absence of a checking mechanism after the code has been copied to Stack Overflow, they can become toxic code snippets, i.e.\~they suffer from being outdated or violating the original software license. We present a study of online code clones on Stack Overflow and their toxicity by incorporating two developer surveys and a large-scale code clone detection. A survey of 201 high-reputation Stack Overflow answerers (33% response rate) showed that 131 participants (65%) have ever been notified of outdated code and 26 of them (20%) rarely or never fix the code. 138 answerers (69%) never check for licensing conflicts between their copied code snippets and Stack Overflow\rquote s CC BY-SA 3.0. A survey of 87 Stack Overflow visitors shows that they experienced several issues from Stack Overflow answers: mismatched solutions, outdated solutions, incorrect solutions, and buggy code. 85% of them are not aware of CC BY-SA 3.0 license enforced by Stack Overflow and 66% never check for license conflicts when reusing code snippets. Our clone detection found online clone pairs between 72,365 Java code snippets on Stack Overflow and 111 open source projects in the curated Qualitas corpus. We analysed 2,289 non-trivial online clone candidates. Our investigation revealed strong evidence that 153 clones have been copied from a Qualitas project to Stack Overflow. We found 100 of them (66%) to be outdated and potentially harmful for reuse. Furthermore, we found 214 code snippets that could potentially violate the license of their original software and appear 7,112 times in 2,427 GitHub projects.\par
}{\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb120 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{IEEEkeywords\} ... \\end\{IEEEkeywords\}}]\par
}}\pard\plain\s20\qc\sb240\sa240\b\f0\fs36\sl240\slmult1 \fi300 Toxic Code Snippets on Stack Overflow\par
\pard\plain\s21\qc\sa120\f0\fs20\sl240\slmult1 \fi300 Chaiyong Ragkhitwetsagul,\~Jens Krinke,\~Matheus Paixao,\~Giuseppe Bianco,\~Rocco Oliveto\par
\pard\plain\s21\qc\sa120\f0\fs20\sl240\slmult1 \fi300 \chdate \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 {\*\bkmkstart BMsec_introduction}1{\*\bkmkend BMsec_introduction}  Introduction\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Stack Overflow is a popular online programming community with 7.6 million users, 14 million questions, and 23 million answers{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Data as of 21 August 2017 from\~{\f3 https://stackexchange.com/sites}}
. It allows programmers to ask questions and give answers to programming problems. The website has found to be useful for software development\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ponzanelli2013 \\* MERGEFORMAT }}{\fldrslt{Ponzanelli2013}}}
] and also valuable for educational purposes\~
[{\field{\*\fldinst{\lang1024 REF BIB_Nasehi2012 \\* MERGEFORMAT }}{\fldrslt{Nasehi2012}}}
]. On Stack Overflow, each conversation contains a question and a list of answers. The answers frequently contain at least one code snippet as a solution to the question asked. We found that the code snippets are usually not authored directly on the Stack Overflow website but copied from another location. A snippet in an answer could be copied and modified from a code snippet in the question, copied from the answerer\rquote s own code or from other locations including open source software (OSS) systems.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The process of posting and answering questions on Stack Overflow that involves the reuse (copying) of source code can be considered code cloning. Code cloning is an activity of reusing source code by copying and pasting. It normally occurs in software development and account from 7% to 23% of source code in typical software systems\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
]. The benefits and drawbacks of clones are still controversial. Several authors state that clones lead to bug propagations and software maintenance issues\~
[{\field{\*\fldinst{\lang1024 REF BIB_Kamiya2002 \\* MERGEFORMAT }}{\fldrslt{Kamiya2002}}}
], while some others suggest that clones are not harmful and can even be beneficial\~
[{\field{\*\fldinst{\lang1024 REF BIB_Saini2016 \\* MERGEFORMAT }}{\fldrslt{Saini2016}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Code cloning can also have side effects such as violating software licenses or introducing software vulnerabilities. Carelessly cloning code from one project to another project with a different license may cause a software license violation\~
[{\field{\*\fldinst{\lang1024 REF BIB_German2009 \\* MERGEFORMAT }}{\fldrslt{German2009}}}
]. This also happens within the context of online Q&A websites such as Stack Overflow. An et al.\~
[{\field{\*\fldinst{\lang1024 REF BIB_An2017 \\* MERGEFORMAT }}{\fldrslt{An2017}}}
] showed that 1,279 cloned snippets between Android apps and Stack Overflow potentially violate software licenses. Security is also among the main concerns when code is copied from an online source. For example, Stack Overflow helps developers to solve Android programming problems more quickly than other resources while, at the same time, offers less secure code than books or the official Android documentation\~
[{\field{\*\fldinst{\lang1024 REF BIB_Acar2016 \\* MERGEFORMAT }}{\fldrslt{Acar2016}}}
].\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300  {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_before_after}1{\*\bkmkend BMfig_before_after}: An example of the two code fragments of {\fs18 {\f3 WritableComparator.java}}. The one from the Stack Overflow post 22315734 (left) is outdated when compared to its latest version in the {\f2 Hadoop} code base (right). Its Apache v.2.0 license is also missing.}{\field{\*\fldinst TC "1 An example of the two code fragments of {\fs18 {\f3 WritableComparator.java}}. The one from the Stack Overflow post 22315734 (left) is outdated when compared to its latest version in the {\f2 Hadoop} code base (right). Its Apache v.2.0 license is also missing." \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We call code snippets that are copied from software systems to online Q&A websites (such as Stack Overflow) and vice versa as \ldblquote online code clones\rdblquote . There are two directions in creating online code clones: (1)\~code is cloned from a software project to a Q&A website as an example; or (2)\~code is cloned from a Q&A website to a software project to obtain a functionality, perform a particular task, or fixing a bug. Similar to classic code clones, i.e.\~clones between software systems, online code clones can lead to license violations, bug propagation, introduction of vulnerabilities, and re-use of outdated code. Unfortunately, online clones are difficult to locate and fix since the search space in online code corpora is larger and no longer confined to a local repository.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To have a deeper insight on online code clones, we surveyed 201 high-reputation Stack Overflow answerers. The results of such a survey show that online code cloning occurs on Stack Overflow. Stack Overflow answerers frequently clone code from other locations, such as their personal projects, company projects, and open source projects, to Stack Overflow as a solution or a complement to a solution. The code cloning activity on Stack Overflow is obviously beneficial considered the popularity of Stack Overflow and its influence on software development\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ponzanelli2013 \\* MERGEFORMAT }}{\fldrslt{Ponzanelli2013}}}
]. On the other hand, there is also a downside caused by low quality, defective, and harmful code snippets that are reused without an awareness by millions of users\~
[{\field{\*\fldinst{\lang1024 REF BIB_Zhang2018 \\* MERGEFORMAT }}{\fldrslt{Zhang2018}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 One participant in our survey expresses his/her concerns about this:\par
{{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi300 \scaps0\i \ldblquote The real issue is less about the amount the code snippets on SO than it is about the staggeringly high number of software \ldblquote professionals\rdblquote  that mindlessly use them without understanding what they\rquote re copying, and the only slightly less high number of would-be professionals that post snippets with built-in security issues. A related topic is beginners who post (at times dangerously) misleading tutorials online on topics they actually know very little about. Think PHP/MySQL tutorials written 10+ years after {\f3 mysql_*} functions were obsolete, or the recent regex tutorial that got posted the other day on HackerNew ({\f3 https://news.ycombinator.com/item?id=14846506}). They\rquote re also full of toxic code snippets.\rdblquote } \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 Although this activity of online code cloning is well-known, there is only a few empirical studies on the topic\~
[{\field{\*\fldinst{\lang1024 REF BIB_An2017 \\* MERGEFORMAT }}{\fldrslt{An2017}}}
], especially on finding the origins of the clones on Q&A websites. In this study, we tackle this challenge of establishing existence of online code clones on Stack Overflow, investigate how they occur, and study the potential effects to software reusing them. Therefore, we mine Stack Overflow posts, detected online code clones, and analysed the clones to reveal \ldblquote toxic code snippets\rdblquote .\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Toxic code snippets mean code snippets that, after incorporating into software, the cost of paying back the technical debt exceeds the value it generates in the long run. Stack Overflow code snippets cloned from open source software or online sources can become toxic when they are (1)\~outdated, (2)\~violating their original software license, (3) exhibiting code smells, or (4) having security vulnerabilities. In this study, we focus on the first two forms of toxic code snippets, outdated code and license-violating code, as these two problems are still under explored compared to code smells\~
[{\field{\*\fldinst{\lang1024 REF BIB_Tufano2015 \\* MERGEFORMAT }}{\fldrslt{Tufano2015}}}
] and vulnerabilities\~
[{\field{\*\fldinst{\lang1024 REF BIB_Acar2016 \\* MERGEFORMAT }}{\fldrslt{Acar2016}}}
]. Moreover, Stack Overflow users also express their concerns about these two problems as shown in several discussion threads{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Discussions about outdated answers and code license on Stack Overflow: meta.stackexchange.com/questions/131495, meta.stackexchange.com/questions/11705/, meta.stackexchange.com/questions/12527, meta.stackexchange.com/questions/25956, meta.stackoverflow.com/questions/321291.}
 on {\f2 meta.stackexchange.com} about outdated answers and license of code on Stack Overflow. Outdated code snippets can be harmful since they are not up-to-date with their originals and may contain defects. Code snippets from open source projects usually fall under a specific software license, e.g. GNU General Public License (GPL). If they are cloned to Stack Overflow answers without the license, and then flow to other projects with conflicting licenses, legal issues may occur.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We would like to motivate the readers by giving two examples of toxic code snippets. The first example is an outdated and potentially license-violating online code clone in an answer to a Stack Overflow question regarding how to implement {\fs18 {{\f3 RawComparator}}} in {\f2 Hadoop}{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} {\f3 http://stackoverflow.com/questions/22315734}}
. {fig:before-after} shows\emdash on the left\emdash a code snippet embedded as a part of the accepted answer. The snippet shows how {\f2 Hadoop} implements the {\fs18 {{\f3 compare}}} method in its {\fs18 {{\f3 WritableComparator}}} class. The code snippet on the right shows another version of the same method, but at this time extracted from the latest version (as of October 3, 2017) of {\f2 Hadoop}. We can see that they both are highly similar except a line containing {\fs18 {{\b0\i0\scaps0\f3 buffer.reset(null,0,0);}}} which was added on November 21, 2014. The added line is intended for cleaning up the reference in the {\fs18 {{\b0\i0\scaps0\f3 buffer}}} variable and avoid excess heap usage (issue no.\~HADOOP-11323{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} https://issues.apache.org/jira/browse/HADOOP-11323}
). While this change has already been introduced into the {\fs18 {{\f3 compare}}} method several years ago, the code example in Stack Overflow post is still unchanged. In addition, the original code snippet of {\fs18 {\f3 WritableComparator}} class in Hadoop is distributed with Apache license version 2.0 while its cloned instance on Stack Overflow contains only the {\fs18 {{\f3 compare}}} method and ignores its license statement on top of the file. There are two potential issues for this. First, the code snippet may appear to be under Stack Overflow\rquote s CC BY-SA 3.0 instead of its original Apache license. Second, if the code snippet is copied and incorporated into another software project with a conflicting license, a legal issue may arise.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_before_after_2}2{\*\bkmkend BMfig_before_after_2}: An example of the two code fragments of {\fs18 {\f3 StringUtils.java}}. The one from the Stack Overflow post 801987 (left) is outdated when compared to its latest version in the {\f2 Hadoop} code base (right). The toxic code snippet is outdated code and has race conditions.}{\field{\*\fldinst TC "2 An example of the two code fragments of {\fs18 {\f3 StringUtils.java}}. The one from the Stack Overflow post 801987 (left) is outdated when compared to its latest version in the {\f2 Hadoop} code base (right). The toxic code snippet is outdated code and has race conditions." \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 The second motivating example of outdated online code clones with more disrupting changes than the first one can be found in an answer to a Stack Overflow question regarding how to format files sizes in a human readable form. {fig:before-after\\s\\do5({\fs16 2})} shows\emdash on the left\emdash a code snippet to perform the task from the {\fs18 {{\f3 StringUtils}}} class in {\f2 Hadoop}. The code snippet on the right shows another version of the same method, but at this time extracted from the latest version of {\f2 Hadoop}. We can see that they are totally different. The {\fs18 {{\f3 humanReadableInt}}} method is rewritten on February 5, 2013 to solve an issue of a race condition (issue no.\~HADOOP-9252{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} https://issues.apache.org/jira/browse/HADOOP-9252}
).\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The two toxic code snippets in our examples have been posted on March 11, 2014 and April 9, 2009 respectively. They have already been viewed 259 and 2,886 times{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} The number of views is for the whole Stack Overflow post but we use it as a proxy of the number of views the accepted answer receives because the question and the answer of the two motivation examples have a short gap of posting time (within the same day and four days after).}
 at the time of writing this paper (October 3, 2017). Our calculation finds that there will be a new viewer of the first toxic snippet approximately every 5 days compared to almost every day for the second one. Considering the popularity of Stack Overflow, which has more than 50 million developers visiting each month{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Data as of 21 August 2017 from: {\f3 https://stackoverflow.com}}
, one toxic code snippet on Stack Overflow can spread and grow to hundred or thousand copies within only a year or two.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 While research has mostly focused on reusing code snippets {\i from} Stack Overflow (e.g.\~
[{\field{\*\fldinst{\lang1024 REF BIB_Keivanloo2014 \\* MERGEFORMAT }}{\fldrslt{Keivanloo2014}}}
]), fewer studies have been conducted on finding the origins of code examples copied {\i to} Stack Overflow and the awareness of Stack Overflow developers in doing so. Finding the origins of code examples reveals the problem of toxic code snippets caused by outdated code and software licensing violations. It is equally important to studying the effects of reusing Stack Overflow code snippets because it gives insights to the root cause of the problem and lays a foundation to an automatic technique to detect and report toxic code snippets on Stack Overflow to developers in the future.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 This paper makes the following primary contributions:\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
{\b Awareness of Stack Overflow answerers and visitors to toxic code snippets:} We performed an online survey and collected answers from 201 highly-ranked Stack Overflow users and 87 Stack Overflow visitors. We found that the answerers cloned code snippets from open source projects to Stack Overflow answers. While Stack Overflow answerers are aware of their outdated code snippets, 19% of the participants rarely or never fix the code. 99% of the answerers never include a software license in their snippets and 69% never check for licensing conflicts. On the other hand, 66% of the Stack Overflow visitors experienced problems from reusing Stack Overflow code snippets, including outdated code. They are generally not aware of the CC BY-SA 3.0 license, and more than half of them never check for license compatibility when reusing Stack Overflow code snippets.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
{\b A manual study of online code clones:} To empirically confirm the findings from the surveys, we used two clone detection tools to discover 2,289 similar code snippet pairs between 72,365 Java code snippets obtained from Stack Overflow\rquote s accepted answers and 111 Java open source projects from the curated Qualitas corpus\~
[{\field{\*\fldinst{\lang1024 REF BIB_QualitasCorpus \\* MERGEFORMAT }}{\fldrslt{QualitasCorpus}}}
]. We manually classified all of them.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
{\b An investigation of toxic code snippets on Stack Overflow:} Our study shows that from the 2,289 online clones, at least 328 have been copied from open source projects or external online sources to Stack Overflow, potentially violating software licenses. For 153 of them, we found evidence that they have been copied from a specific open source project. 100 of them we found to be outdated. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
{\b An online code clone oracle:} The 2,289 manually investigated and validated online clone pairs are available for download{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} https://ucl-crest.github.io/cloverflow-web}
 and can be used as a clone oracle. \par
}\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb300 \fi0 2  Empirical Study\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We performed an empirical study of online code clones between Stack Overflow and 111 Java open source projects to answer the following research questions: {\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b RQ1 (Stack Overflow answerers\rquote  and visitors\rquote  awareness to toxic code snippets): }\par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \scaps0\i 1)\~How often are Stack Overflow answerers aware of the outdated code and licensing conflicts when they answer a question on Stack Overflow?} \par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 \scaps0\i 2) How often do Stack Overflow visitors experience the outdated code and licensing conflicts when they reuse code in an answer from Stack Overflow?} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \li600\fi0 We surveyed 201 high-reputation Stack Overflow answerers and 87 Stack Overflow visitors to study their awareness of the two issues.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b RQ2 (Online code clones): }{\i To what extent is source code cloned between Stack Overflow and open source projects?} We quantitatively measured the number of online code clones between Stack Overflow and open source projects to understand the scale of the problem. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b RQ3 (Patterns of online code clones): }{\i How do online code clones occur?} We categorised online clones into seven categories allowing insights to how online code clones are created.\par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b RQ4 (Outdated online code clones): }{\i Are online code clones up-to-date compared to their counterparts in the original projects?} We were interested in the outdated Stack Overflow code examples since users are potentially reusing them. \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 \bullet\tab
{\b RQ5 (Software licensing violation): }{\i How often do license conflicts occur between Stack Overflow clones and their originals?} We investigated whether the reuse of online code clones can cause software developers to violate licenses. \par
}{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb300 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_exp_framework}3{\*\bkmkend BMfig_exp_framework}: Experimental framework}{\field{\*\fldinst TC "3 Experimental framework" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 To answer these five research questions, we perform two surveys and an empirical study to understand the developers\rquote  awareness of toxic code snippets on Stack Overflow and to empirically study the online code clones between Stack Overflow and open source projects and their toxicity. \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.1  Stack Overflow Developers\rquote  Survey\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We support our motivation of toxic code snippets on Stack Overflow and answer RQ1 by asking Stack Overflow users to take an online survey. The survey was used for assessing awareness of the developers on the two issues of outdated code and license-violating code snippets. We designed the survey using Google Forms by following the guidelines by Pfleeger and Kitchenham\~
[{\field{\*\fldinst{\lang1024 REF BIB_Pfleeger2001 \\* MERGEFORMAT }}{\fldrslt{Pfleeger2001}}}
]. The survey was completely anonymous and the participants could decide to leave at any time. We created two versions of the survey: {\b the answerer survey} and {\b the visitor survey}. The answerer survey targeted the developers who were experienced Stack Overflow users and were highly active in answering questions. The visitor survey targeted the developers who searched for solutions and reused code from Stack Overflow answers.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b The answerer survey:} the survey contained 11 questions. There were 7 Likert\rquote s scale questions, 3 yes/no questions, and one open-ended question for additional comments. The first two questions were mandatory while the other 9 questions were shown to the participants based on their previous answers. The full survey can be found in our research note\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ragkhitwetsagul_RN2017 \\* MERGEFORMAT }}{\fldrslt{Ragkhitwetsagul\\s\\do5({\fs16 R})N2017}}}
]. We selected the participants for the answerer survey based on their Stack Overflow reputation. On Stack Overflow, a user\rquote s reputation reflects how much the community trusts them. A user earns reputations when he or she receives up votes for good questions and useful answers. Accepted answers receive more reputation score than questions, and regular answers{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Stack Overflow Reputation:\~{\f3 https://stackoverflow.com/help/whats-reputation}}
. Thus, Stack Overflow reputation is an indicator of user\rquote s skills and their involvement in asking and answering questions on the site. In this study, we call Stack Overflow users who have high reputation \ldblquote Stack Overflow answerers.\rdblquote  The participants were invited to take the survey via email addresses available on their public Stack Overflow and GitHub profiles. We selected the answerers based on the all-time reputation ranking{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Stack Overflow Users (data as of 25 July 2017):\~{\f3 https://stackoverflow.com/users?tab=Reputation&filter=all}}
. The invited participants had a reputation from 963,731 (the highest) to 6,999 and we sent out 607 emails (excluding undelivered ones, e.g. due to illegal email addresses). The survey was open for participation for two months, from 25 July to 25 September 2017, before we collected and analysed the responses.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b The visitors\rquote  survey} The survey consists of 16 questions: 9 Likert\rquote s scale questions, 3 yes/no questions, 2 multiple-choice questions, and 2 open-ended questions. The first four questions are mandatory while the other 12 questions will be shown to the participants based on their previous answers. The survey collects information about the participant\rquote s software development experience, the importance of Stack Overflow, reasons for reusing Stack Overflow snippets, problems from Stack Overflow snippets, licensing of code on Stack Overflow, and additional feedback. The full survey can be found in our research note\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ragkhitwetsagul_RN2017 \\* MERGEFORMAT }}{\fldrslt{Ragkhitwetsagul\\s\\do5({\fs16 R})N2017}}}
]. We adopted non-probability convenient sampling to invite participants for this survey. Participation in the survey requires experience of visiting Stack Overflow for solving programming tasks at least once. The participants were invited to take the survey via five channels: social media post (Facebook), {\f2 blognone.com}, a popular technology news and media community in Thailand, the University of Molise in Italy where the third author works, {\f3 comp.lang.java.programmer} group and the Software Engineering Facebook page. The survey was open for participation for 2 months from 25 July 2017 to 25 September 2017.\par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 2.2  Empirical Study of Online Code Clones\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We support the motivation and confirm the findings in the surveys by performing an empirical study of online code clones between Stack Overflow answers and 111 Java open source projects. We designed the study in 6 phases as depicted in {fig:exp\\s\\do5({\fs16 f})ramework} where we build different data sets to answer RQ2 to RQ5. \par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.2.1  Phase 1: Clone Identification\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We rely on two source code data sets in this study: Java code snippets in answers on Stack Overflow and open source projects from the Qualitas corpus 
[{\field{\*\fldinst{\lang1024 REF BIB_QualitasCorpus \\* MERGEFORMAT }}{\fldrslt{QualitasCorpus}}}
], as detailed next.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Stack Overflow:} We extracted Java code snippets from a snapshot of a Stack Overflow dump{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} {\f3 https://archive.org/details/stackexchange}}
 in January 2016. The data dump is in XML, and it contains information of posts (questions and answers). We were interested in code snippets embedded in posts which were located between {\fs18 {\f3 <code>}...{\f3 </code>}} tags. A Stack Overflow thread contains a question and several answers. An answer can also be marked as an {\b accepted answer} by the questioner if the solution fixes his/her problem. We collected Java code snippets using two criteria. First, we only focused on code snippets in accepted answers. We chose the snippets in accepted answers because they actually solved the problems in the questions. Moreover, they are usually displayed just below the questions which makes them more likely to be reused than other answers. Second, we were only interested in code snippets of at least ten lines. Although the minimum clone size of six lines are usual in clone detection\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
], we empirically found that snippets of six lines contain a large number of boiler-plate code of getters/setters, {\f3 equal} or {\f3 hashCode} methods, which are not interesting for the study. Each snippet was extracted from the dump and saved to a file. Moreover, we filtered out irrelevant code snippets that were part of the accepted answers but were not written in Java by using regular expressions and manual checking. Finally we obtained 72,365 Java code snippets containing 1,840,581 lines{\cs62\super\chftn}
{\*\footnote\pard \s65\ql\fi-113\li397\lin397\f0\fs20{\cs62\super\chftn} Measured by cloc: {\f3 https://github.com/AlDanial/cloc}}
 of Java source code. The median size of the snippets is 17 lines.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Open source systems: } We selected the established {\b Qualitas} corpus\~
[{\field{\*\fldinst{\lang1024 REF BIB_QualitasCorpus \\* MERGEFORMAT }}{\fldrslt{QualitasCorpus}}}
]. It is a curated Java corpus that has been used in several software engineering studies\~
[{\field{\*\fldinst{\lang1024 REF BIB_Taube_Schock2011 \\* MERGEFORMAT }}{\fldrslt{Taube\\s\\do5({\fs16 S})chock2011}}}
]. The projects in the corpus represent various domains of software systems ranging from programming languages to visualisation. We selected the release 20130901r of the Qualitas corpus containing 112 Java open source projects. This release contains projects with releases no later than 1st September 2013. We intentionally chose an old corpus from 2013 since we are interested in online code clones in the direction from open source projects to Stack Overflow. The 20130901r snapshot provides Java code that is more than 2 years older than the Stack Overflow snapshot, which is sufficiently long for a number of code snippets to be copied onto Stack Overflow and also to observe if clones become outdated. Out of 112 Qualitas projects, there is one project, {\f2 jre}, that does not contain Java source code due to its licensing limitation\~
[{\field{\*\fldinst{\lang1024 REF BIB_QualitasCorpus \\* MERGEFORMAT }}{\fldrslt{QualitasCorpus}}}
] and is removed from the study. This resulted in 111 projects analysed in the study, for a total of 166,709 Java files containing 19,614,083 lines of code (see {tab:datasets}). The median project size is 60,667 lines of code.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_datasets}1{\*\bkmkend BMtab_datasets}: Stack Overflow and Qualitas datasets}{\field{\*\fldinst TC "1 Stack Overflow and Qualitas datasets" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx3610\cellx5395\cellx6899
{\pard\intbl\ql { Data set}\cell}
{\pard\intbl\qr {No. of files}\cell}
{\pard\intbl\qr {SLOC}\cell}
\row}
{\trowd\cellx3610\cellx5395\cellx6899
{\pard\intbl\ql { Stack Overflow}\cell}
{\pard\intbl\qr {72,365}\cell}
{\pard\intbl\qr {1,840,581}\cell}
\row}
{\trowd\cellx3610\cellx5395\cellx6899
{\pard\intbl\ql {Qualitas}\cell}
{\pard\intbl\qr {166,709}\cell}
{\pard\intbl\qr {19,614,083}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b Clone Detection Tools: } We use clone detection to discover online code clones. There are a number of restrictions in terms of choosing the clone detection tools for this study. The main restriction is due to the nature of code snippets posted on Stack Overflow, as most of them are incomplete Java classes or methods. Hence, a detector must be flexible enough to process code snippets that are not compilable or not complete blocks. Moreover, since the amount of code that has to be processed is in a scale of millions line of code (as shown in {tab:datasets}), a clone detector must be scalable enough to report clones in a reasonable amount of time. We have tried 7 state-of-the-art clone detectors including Simian\~
[{\field{\*\fldinst{\lang1024 REF BIB_simian \\* MERGEFORMAT }}{\fldrslt{simian}}}
], SourcererCC\~
[{\field{\*\fldinst{\lang1024 REF BIB_Sajnani2016 \\* MERGEFORMAT }}{\fldrslt{Sajnani2016}}}
], NiCad\~
[{\field{\*\fldinst{\lang1024 REF BIB_Cordy \\* MERGEFORMAT }}{\fldrslt{Cordy}}}
], CCFinder\~
[{\field{\*\fldinst{\lang1024 REF BIB_Kamiya2002 \\* MERGEFORMAT }}{\fldrslt{Kamiya2002}}}
], iClones\~
[{\field{\*\fldinst{\lang1024 REF BIB_Gode2009 \\* MERGEFORMAT }}{\fldrslt{Gode2009}}}
], DECKARD\~
[{\field{\*\fldinst{\lang1024 REF BIB_Jiang2007a \\* MERGEFORMAT }}{\fldrslt{Jiang2007a}}}
], and PMD-CPD\~
[{\field{\*\fldinst{\lang1024 REF BIB_pmd_cpd \\* MERGEFORMAT }}{\fldrslt{pmd\\s\\do5({\fs16 c})pd}}}
] against the Stack Overflow and Qualitas datasets. NiCad failed to parse 44,960 Stack Overflow snippets while PMD CPD failed to complete the execution due to lexical errors. iClones could complete its execution but skipped 367 snippets due to malformed blocks in Stack Overflow data sets. CCFinder reported 8 errors while processing the two data sets. Although Simian, SourcererCC, and DECKARD could successfully report clones, we decided to choose only Simian and SourcererCC due to their fast detection speed. Moreover, Simian and SourcererCC complement each other as SourcererCC\rquote s clone fragments are always confined to method boundaries while Simian\rquote s fragments are not.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Simian} is a text-based clone detector that locates clones at line-level granularity and has been used extensively in several clone studies\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ragkhitwetsagul2016 \\* MERGEFORMAT }}{\fldrslt{Ragkhitwetsagul2016}}}
]. Furthermore, it offers normalisation of variable names and literals (strings and numbers) which enables Simian to detect literal clones (type-1) and parameterised clones (type-2)\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
]. {\b SourcererCC} is a token-based clone detector which detects clones at either function- or block-level granularity. It can detect clones of type-1, -2 up to type-3 (clones with added and removed statements) and offer scalability against large code corpus\~
[{\field{\*\fldinst{\lang1024 REF BIB_Sajnani2016 \\* MERGEFORMAT }}{\fldrslt{Sajnani2016}}}
]. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We prepared the Java code in both datasets by removing comments and pretty-printing to increase the clone detection accuracy. Then, we deployed the two detectors to locate clones between the two datasets. For each Qualitas project, we ran the tools on the project\rquote s code and the entire Stack Overflow data. Due to incomplete code blocks and functions normally found in Stack Overflow snippets, the built-in SourcererCC\rquote s Java tokeniser could not parse 45,903 snippets, more than half of them. Nevertheless, the tool provides an option to plug in a customised tokeniser, so we developed a special Java tokeniser with assistance from the tool\rquote s creators. The customised tokeniser successfully processed all Stack Overflow snippets.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Simian did not provide an option to detect cross-project clones. Hence the Simian clone report was filtered to contain only clone pairs between Stack Overflow and Qualitas projects, removing all clone pairs within either Stack Overflow or within Qualitas. SourcererCC can detect cross-project clones between two systems so we did not filter the clones.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_clone_config}2{\*\bkmkend BMtab_clone_config}: Configurations of Simian and SourcererCC}{\field{\*\fldinst TC "2 Configurations of Simian and SourcererCC" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx4055\cellx6900
{\pard\intbl\ql { Tool}\cell}
{\pard\intbl\ql {Configurations}\cell}
\row}
{\trowd\cellx4055\cellx6900
{\pard\intbl\ql { Simian\~({\i S})}\cell}
{\pard\intbl\ql {Threshold=10, ignoreStringCase,}\cell}
\row}
{\trowd\cellx4055\cellx6900
{\pard\intbl\ql {}m{#1}}ignoreCharacterCase, }m{#1}}ignoreModifiers  SourcererCC\~({\i SCC})}\cell}
{\pard\intbl\ql {Functions, Minimum clone size=10, }m{#1}}Similarity=80% }\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b Clone Detection Configuration: } We are aware of effects of configurations to clone detection results and the importance of searching for optimised configurations in empirical clone studies\~
[{\field{\*\fldinst{\lang1024 REF BIB_Svajlenko2014 \\* MERGEFORMAT }}{\fldrslt{Svajlenko2014}}}
]. However, considering the massive size of the two datasets and the search space of at least 15 Simian and 3 SourcererCC parameters, we are unable to search for the best configurations of the tools. Thus, we decided to configure Simian and SourcererCC based on their established default configurations chosen by the tools\rquote  creators as depicted in {tab:clone\\s\\do5({\fs16 c})onfig}. The two clone detectors complement each other by having Simian detecting literal copies of code snippets (type-1) and SourcererCC detecting clones with renaming and added/deleted statements (type-2, type-3). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Nevertheless, we investigated a crucial parameter setting for clone detection: the minimum clone size threshold. Choosing a large threshold value can reduce the number of trivial clones (e.g. {\f3 equals}, {\f3 hashCode}, or getter and setter methods) and false clones in the analysis or the manual investigation phase\~
[{\field{\*\fldinst{\lang1024 REF BIB_Sajnani2016 \\* MERGEFORMAT }}{\fldrslt{Sajnani2016}}}
], while at the same time may create some false negatives, i.e.\~increasing precision. On the other hand, setting a low threshold results in a larger number of clone candidate pairs to look at, i.e.\~increasing recall, and a higher chance of getting false positives. Moreover, the large number of clone pairs will hinders the full manual validation of the clones. Three threshold values, six, ten, and fifteen lines, were chosen for our investigation. We started our investigation by using a threshold value of six lines, a well-accepted minimum clone size in clone benchmark\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
]. Simian reported 67,172 clone candidate pairs and SourcererCC reported 7,752 clone candidate pairs. We randomly sampled 382 pairs from the two sets for manual check. This sample amount was a statistical significant sample with a 95% confidence level and {{\u177*}5%} confidence interval. The first author investigated the sampled clone pairs and classified them into three groups: non-clones, trivial clones ({\f3 equals}, {\f3 hashCode}, or getter and setter methods), and non-trivial clones. The manual check found 26 non-clone pairs; 322 trivial clone pairs and 34 non-trivial clone pairs. Next, we increased the threshold to ten lines, another well-established minimum clone size for large-scale data sets\~
[{\field{\*\fldinst{\lang1024 REF BIB_Sajnani2016 \\* MERGEFORMAT }}{\fldrslt{Sajnani2016}}}
], and retrieved 721 clone pairs from Simian and 1,678 clone pairs from SourcererCC. We randomly sampled and manually checked the same amount of 382 pairs and found 27 non-clone pairs, 253 trivial clone pairs and 102 non-trivial clone pairs. Then, we increased the threshold further to fifteen lines and retrieved 196 clone pairs from Simian and 1,230 clone pairs from SourcererCC. The manual check of the 382 randomly sampled pairs reveal zero non-clone pairs, 298 trivial clone pairs and 83 non-trivial clone pairs.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The findings from the three threshold values show that selecting the minimum clone size of ten lines was preferred over six and fifteen lines. First, it generated a fewer number of clone pairs than using six lines, which made the manual clone investigation feasible. Second, it preserved the highest number of non-trivial clone pairs. The number of online clone pairs reported using the minimum clone size of 10 lines are presented in {tab:orig\\s\\do5({\fs16 s})tats}. Simian reports 721 clone pairs while SourcererCC reports 1,678 clone pairs. The average clone size reported by Simian is 16.61 lines which is slightly smaller than SourcererCC (17.86 lines).\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_orig_stats}3{\*\bkmkend BMtab_orig_stats}: Number of online clones reported by Simian and SourcererCC}{\field{\*\fldinst TC "3 Number of online clones reported by Simian and SourcererCC" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx2257\cellx4514\cellx6898
{\pard\intbl\ql { Tool}\cell}
{\pard\intbl\qc {Total clone pairs}\cell}
{\pard\intbl\qc {Average clone size}\cell}
\row}
{\trowd\cellx2257\cellx4514\cellx6898
{\pard\intbl\ql { Simian}\cell}
{\pard\intbl\qr {721}\cell}
{\pard\intbl\qr {16.61}\cell}
\row}
{\trowd\cellx2257\cellx4514\cellx6898
{\pard\intbl\ql {SourcererCC}\cell}
{\pard\intbl\qr {1,678}\cell}
{\pard\intbl\qr {17.86}\cell}
\row}
} \par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb360 \fi0 2.2.2  Phase 2: Clone Merging\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Clones from the two detectors can be duplicated. To avoid double-counting of the same clone pair, we adopted the idea of {\b clone agreement} which has been used in clone research studies\~
[{\field{\*\fldinst{\lang1024 REF BIB_Funaro2010 \\* MERGEFORMAT }}{\fldrslt{Funaro2010}}}
] to merge clones from two data sets. Clone pairs agreed by both clone detection tools have a high likelihood to be duplicate and must be merged. To find agreement between two clone pairs reported by two different tools, we used the clone pair matching metric proposed by Bellon et al.\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
]. Two clone pairs that have a large enough number of overlapping lines can be categorised as either a good-match or an ok-match pair with a confidence value between 0 and 1. Although good-match has stronger agreement than ok-match, we choose the ok-match criterion as our clone merging method because it depends on clone containment and does not take clone size into account. Clone containment suits our online code clones from two tools, Simian (line-level) and SourcererCC (method-level), better because Simian\rquote s clone fragments can be smaller or bigger than a method while SourcererCC\rquote s clone fragments are always confined to a method boundary.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We follow Bellon\rquote s original definitions of ok-match\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
], which are based on how much two clone fragments {\i CF} are contained in each other: {\par
\pard\plain\s11\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3450\sl240\slmult1 \fi0 \tab
\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 clone pair {\i CP} is formed by two clone fragments {\i CF{{\field{\*\fldinst{ EQ \\s\\do5({\fs16 1})}}{\fldrslt }}
}} and {\i CF{{\field{\*\fldinst{ EQ \\s\\do5({\fs16 2})}}{\fldrslt }}
}}, i.e.\~{\i CP} = ({\i CF{{\field{\*\fldinst{ EQ \\s\\do5({\fs16 1})}}{\fldrslt }}
}}, {\i CF{{\field{\*\fldinst{ EQ \\s\\do5({\fs16 2})}}{\fldrslt }}
}}) and the {\i ok-value} of two clone pairs is defined as {\par
\pard\plain\s18\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3450\tqr\tx6900\sl240\slmult1 \fi0 \tab
\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 clone pairs {{\field{\*\fldinst{ EQ {\f0 {\i {\i C}{\i P}}}\\s\\do5({\fs16 1})}}{\fldrslt }}
} and {{\field{\*\fldinst{ EQ {\f0 {\i {\i C}{\i P}}}\\s\\do5({\fs16 2})}}{\fldrslt }}
} are called an {\i ok-match(t)} iff, for threshold {{\i t}{\f5\u8712*}[0,1]} holds {\par
\pard\plain\s18\ql\sb120\sa120\keep\widctlpar\f0\tqc\tx3450\tqr\tx6900\sl240\slmult1 \fi0 \tab
\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The threshold {\i t} is crucial for the ok-match because it affects the number of merged clone pairs. Setting a high {\i t} value will result in a few ok-match clone pairs and duplicates of the same clone pairs (which are supposed to be merged) may appear in the merged clone set. On the other hand, setting a low {\i t} value will result in many ok-match clone pairs and some non-duplicate clone pairs may be accidentally merged by only a few matching lines. In order to get an optimal {{\i t}} value, we did an analysis by choosing five {{\i t}} values of 0.1, 0.3, 0.5, 0.7, and 0.9 and studied the clone candidates. By setting {{\i t}=0.7} according to Bellon\rquote s study, we found 97 ok-match pairs reported. On the other hand, setting {{\i t}} to 0.1, 0.3, 0.5, and 0.9 resulted in 111, 110, 110, and 94 ok-matched pairs respectively. Since the clone pairs of {{\i t}=0.1} was the superset of other sets, we manually checked all the 111 reported pairs. We found one false positive pair and 110 true positive pairs. By raising the {{\i t}} to 0.3 and 0.5, we got rid of the false positive pair and still retained all the 110 true positive pairs. All the clone pairs of {{\i t}=0.7} (97) and {{\i t}=0.9} (94) were also true positives due to being a subset of {{\i t}=0.5}. However, since there is a fewer merged clone pairs, we ended up leaving some duplicates of the same clones in the final merged clone set. With this analysis, we can see that setting the threshold {{\i t}} to 0.1 is too relaxed and results in having false positive ok-match pairs, while setting the {{\i t}} to 0.7 or 0.9 is too strict. Thus, we decided to select the {{\i t}} value at 0.5. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Using the ok-match criterion with the threshold {\i t} of 0.5 similar to Bellon\rquote s study\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
], we merge 721 clone pairs from Simian and 1,678 clone pairs from SourcererCC into a single set of 2,289 online clone pairs. There are 110 common clone pairs between the two clone sets as depicted in\~{fig:clonemerging}. The low number of common clone pairs is due to SourcererCC reporting clones with method boundaries while Simian is purely line-based.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_clonemerging}4{\*\bkmkend BMfig_clonemerging}: The result from clone merging using Bellon\rquote s ok-match criterion}{\field{\*\fldinst TC "4 The result from clone merging using Bellon\rquote s ok-match criterion" \\f f}{\fldrslt }}\par
}\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb360 \fi0 2.2.3  Phase 3-4: Validation and Classification\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We used the 2,289 merged clone pairs for manual validation and online clone classification. The validation and classification of the pairs was done at the same time. The clone validation process (phase 3 in {fig:exp\\s\\do5({\fs16 f})ramework}) involves checking if a clone pair is a true positive or a false positive. Moreover, we are also interested in the patterns of code cloning so we can gain more insights into how these clones are created (phase 4 in {fig:exp\\s\\do5({\fs16 f})ramework}). \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Manual investigation:} To mitigate the human error, we deployed two people in the manual clone investigation process. The first author, who is a research student working on clone detection research for three years, and the third author, who is a software engineering research student and familiar with code clones, took the role of the investigators performing a manual validation and classification of the merged clone pairs. The two investigators separately went through each clone pair candidate, looked at the clones, and decided if they are a true positive or a false positive and classified them into an appropriate pattern. After the validation, the results from the two investigators were compared. There were 338 (15%) conflicts between true and false clones (QS, SQ, EX, UD, BP, IN vs.\~NC). The investigators looked at each conflicting pair together and discussed until a consensus was made. Another 270 pairs (12%) were conflicts in the classification of the true clone pairs. Among these pairs, 145 conflicts were caused by one investigator being more careful than the other and being able to find evidence of copying while the other could not. Thus, resolving the conflicts lead to a better classification, i.e.\~from UD to QS or EX.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_classification_scheme}4{\*\bkmkend BMtab_classification_scheme}: The seven patterns of online code cloning}{\field{\*\fldinst TC "4 The seven patterns of online code cloning" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc { Patt.}\cell}
{\pard\intbl\ql {Description}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc { QS}\cell}
{\pard\intbl\ql {Cloned from Qualitas project to Stack Overflow (Q {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} S)}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc {SQ}\cell}
{\pard\intbl\ql {Cloned from Stack Overflow to Qualitas project (S {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} Q)}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc {EX}\cell}
{\pard\intbl\ql {Cloned from an external source to Stack Overflow (X {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} S)}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc {UD}\cell}
{\pard\intbl\ql {Cloned from each other or from an external source outside the project (unknown)}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc { BP}\cell}
{\pard\intbl\ql {Boiler-plate or IDE auto-generated}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc {IN}\cell}
{\pard\intbl\ql {Inheritance, interface implementation}\cell}
\row}
{\trowd\cellx2718\cellx6900
{\pard\intbl\qc {NC}\cell}
{\pard\intbl\ql {Not clones}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b The online cloning classification patterns:} We studied the eight patterns of cloning from Kapser et al.\~
[{\field{\*\fldinst{\lang1024 REF BIB_Kapser2006 \\* MERGEFORMAT }}{\fldrslt{Kapser2006}}}
] and performed a preliminary study to evaluate its applicability to our study. We tried to classify 697 online clone pairs from the reported clones in phase 1 using Kapser\rquote s cloning patterns. We found that Kapser\rquote s patterns are too broad for our study and a more suitable and fine-grained classification scheme is needed. After a preliminary study, we adopted one of Kapser\rquote s cloning patterns, {\i boiler-plate code}, and defined six new cloning patterns. The seven patterns include QS, SQ, EX, UD, BP, IN, and NC as presented in {tab:classification\\s\\do5({\fs16 s})cheme}. Pattern QS ({\b Q}ualitas to {\b S}tack Overflow) represents clones that have evidence of being copied from a Qualitas project to Stack Overflow. The evidence of copying can be found in comments in the Qualitas source code or in the Stack Overflow post\rquote s contents. Pattern SQ ({\b S}tack Overflow to {\b Q}ualitas) is cloning, with evidence, in the opposite direction from Stack Overflow to a Qualitas project. Pattern EX ({\b Ex}ternal Sources) is cloning that has evidence of copying from a single or multiple external sources to Stack Overflow, and possibly also to a Qualitas project. Pattern UD ({\b U}nknown {\b D}irection) is cloning that creates identical or highly similar clones between Qualitas and Stack Overflow but where we could not find any attribution of copying. Pattern BP ({\b B}oiler-{\b P}late) represents clones containing boiler-plate. We define three cases of boiler-plate code and use in our classification as shown in {tab:boiler-plate\\s\\do5({\fs16 c})ode}. Our definition is specific to Java and more suitable to our study than the general definition in Kapser\rquote s\~
[{\field{\*\fldinst{\lang1024 REF BIB_Kapser2008 \\* MERGEFORMAT }}{\fldrslt{Kapser2008}}}
]. Pattern IN ({\b In}heritance/Interface) is cloning by inheritance of the same super class or implementation of the same interface. These two activities usually result in similar overriding methods. The last pattern, NC ({\b N}ot {\b C}lones), represents false clone pairs. These are mainly false positive clones from the clone detectors such as similar {\fs18 {\f3 try-catch}} statements.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_boiler_plate_code}5{\*\bkmkend BMtab_boiler_plate_code}: The definition of boiler-plate code}{\field{\*\fldinst TC "5 The definition of boiler-plate code" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx3771\cellx6900
{\pard\intbl\ql { Type}\cell}
{\pard\intbl\ql {Description}\cell}
\row}
{\trowd\cellx3771\cellx6900
{\pard\intbl\ql { {\b API constraints}}\cell}
{\pard\intbl\ql {Similar code fragments are created because of a constraint by an API. For example, reading and writing to database using JDBC, reading and writing a file in Java.}\cell}
\row}
{\trowd\cellx3771\cellx6900
{\pard\intbl\ql { {\b Templating}}\cell}
{\pard\intbl\ql {An optimised or stable code fragment is reused multiple times. This also includes auto-generated code by IDE.}\cell}
\row}
{\trowd\cellx3771\cellx6900
{\pard\intbl\ql { {\b Design patterns}}\cell}
{\pard\intbl\ql {Java design patterns suggest a way of implementing similar pieces of code. For example, getters, setters, {\fs18 {\f3 equals}}, {\fs18 {\f3 hashCode}}, and {\fs18 {\f3 toString}} method.}\cell}
\row}
} \par
}{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb480 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_classification_process}5{\*\bkmkend BMfig_classification_process}: Online code clone classification process}{\field{\*\fldinst TC "5 Online code clone classification process" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 The classification of the filtered online clone pairs followed the steps depicted in {fig:classification\\s\\do5({\fs16 p})rocess}. First, we look at a pair of clone fragments to see their similarity. If they are accidentally similar clones after code normalisation or false positive clones from the clone detection tools, we classify the pair into {\b NC}. If the two fragments are boiler-plate code, the pair is classified into {\b BP}. If they implement the same interface or inherited the same class and share similar overriding methods, the pair is classified into {\b IN}. If the pair is not {\b BP}, {\b IN}, or {\b NC}, we start a detailed investigation. We check the corresponding Stack Overflow post, read through it carefully and look for any evidence mentioning code copying. If evidence of copying has been found from a Qualitas project, the pair is classified in {\b QS}. In several occasions, we used extra information such as questions\rquote  contents, name of posters, and tags to gain a better understanding. On the other hand, if the source code from the Qualitas project mentions copying from Stack Overflow, the pair is classified into {\b SQ}. If there is evidence of copying from an external source instead of a Qualitas projects, the pair is classified into {\b EX}. Lastly, if there is no evidence of copying in any direction but the clone fragments are highly similar, we classify them into {\b UD}.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.2.4  Phase 5: Outdated Clones\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Outdated code occurs when a piece of code has been copied from its origin to another location and later the original has been updated\~
[{\field{\*\fldinst{\lang1024 REF BIB_Xia2014 \\* MERGEFORMAT }}{\fldrslt{Xia2014}}}
]. Usually code clone detection is used to locate clone instances and update them to match with the originals\~
[{\field{\*\fldinst{\lang1024 REF BIB_Bellon2007 \\* MERGEFORMAT }}{\fldrslt{Bellon2007}}}
]. However, online code clones are more difficult to detect than in regular software projects due to its large search space and a mix of natural and programming languages combined in the same post.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 To search for outdated online code clones, we focused on the {\b QS} clone pairs that were cloned from Qualitas to Stack Overflow and compared them with their latest versions. We downloaded the latest version of the Qualitas projects from their repositories on October 3, 2017. For each {\b QS} online clone pair, we used the clone from Qualitas as a proxy. We searched for its latest version by the file name and located the cloned region in the file based on the method name or specific code statements. We then compared the Stack Overflow snippet to its latest version line-by-line to find if any change has been made to the source code. We also made sure that the changes did not come from the modifications made to the Stack Overflow snippets by the posters but from the updates in the projects themselves. When we found inconsistent lines between the two versions, we used {\fs18 {\f3 git blame}} to see who modified those lines of code and the timestamps. We also read commit messages and investigated the issue tracking information if the code change is linked to an automatic issue tracking system, such as Jira or BugZilla to gain insights into the intent behind the change.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 Lastly, we searched for the outdated code snippets in 130,703 GitHub projects to see how widespread is the outdated code in the wild. We mined GitHub based on the number of stars the projects received, which indicated their popularity. We relied on GitHub API to query the project metadata before cloning them. Since GitHub API returned only top 1,000 projects at a time for each query, we formulated the query to retrieve most starred projects based on their sizes. The project size range started from 1KB to 2MB with 1KB step size and the last query is for all the remaining projects that were larger than 2MB. With this method, we retrieved the top 1,000 most starred projects for each project size. As a result, we cloned 130,703 GitHub projects ranging from 29,465 stars to 1 star. A clone detection was then performed between the outdated code snippets and the GitHub projects. We selected SourcererCC with with the same settings (see {tab:clone\\s\\do5({\fs16 c})onfig}) for this task because it could scale to a large-scale data set, while Simian could not. Finally, we analysed the clone reports and manually checked the clones.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 2.2.5  Phase 6: Licensing Analysis\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 Software licensing plays an important role in software development. Violation of software licenses impacts software delivery and also leads to legal issues\~
[{\field{\*\fldinst{\lang1024 REF BIB_Sprigman2015 \\* MERGEFORMAT }}{\fldrslt{Sprigman2015}}}
]. One can run into a licensing issue if one integrates third-party source code into their software without checking. A study by An et al.\~
[{\field{\*\fldinst{\lang1024 REF BIB_An2017 \\* MERGEFORMAT }}{\fldrslt{An2017}}}
] reports 1,279 cases of potential license violations between 399 Android apps and Stack Overflow code snippets.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We analysed licensing conflicts of the online clones in the {\b QS}, {\b EX}, and {\b UD} set. The licenses were extracted by {\i Ninka}, an automatic license identification tool\~
[{\field{\*\fldinst{\lang1024 REF BIB_German2010 \\* MERGEFORMAT }}{\fldrslt{German2010}}}
]. Since Ninka works at file level, we report the findings based on Stack Overflow snippets and Qualitas source files instead of the clone pairs (duplicates were ignored). For the ones that could not be automatically identified by Ninka and have been reported as {\fs18 {\f3 SeeFile}} or {\fs18 {\f3 Unknown}}, we looked at them manually to see if any license can be found. For EX clone pairs that are cloned from external sources such as JDK or websites, we manually searched for the license of the original code. Lastly, we searched for occurrences of the license-conflicting online clones in GitHub projects using the same method as in the outdated clones.\par
\pard\plain\s3\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb240 \fi0 3  Results and Discussion\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We use the two online surveys of Stack Overflow answerers and visitors to answer RQ1 and follow the 6 phases in the experimental framework ({fig:exp\\s\\do5({\fs16 f})ramework}) to answer the other four research questions. To answer RQ2, we rely on the number of manually validated true positive online clone pairs in phase 3. We use the results of the manual classification by the seven patterns of online code cloning to answer RQ3 (phase 4). For RQ4, we looked at the true positive clone pairs that are classified as clones from Qualitas to Stack Overflow and checked if they have been changed after cloning (phase 5). Similarly, for RQ5, we looked at the license of each clone in the pattern QS, EX, UD and checked for a possibility of license violation (phase 6). \par
\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 3.1  RQ1: Stack Overflow Answerers\rquote  and Visitors\rquote  Awareness\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb180 \fi0 3.1.1  The Answerer Survey\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We received 201 answers (33% response rate) from 607 emails we sent to the Stack Overflow answerers. The response rate was high considering other online surveys in software engineering\~
[{\field{\*\fldinst{\lang1024 REF BIB_Punter2003 \\* MERGEFORMAT }}{\fldrslt{Punter2003}}}
]. We only present a summary of the survey answers in this paper and the full analysis is available as a research note\~
[{\field{\*\fldinst{\lang1024 REF BIB_Ragkhitwetsagul_RN2017 \\* MERGEFORMAT }}{\fldrslt{Ragkhitwetsagul\\s\\do5({\fs16 R})N2017}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b General Information:} As shown in {tab:survey\\s\\do5({\fs16 e})xp}, the majority of the answerers are experienced developers with more than 10 years of experience (55.2%) or between 5 to 10 years (28.9%). They are active users and regularly answer questions. 49 participants (24%) answer questions on Stack Overflow every day.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_survey_exp}6{\*\bkmkend BMtab_survey_exp}: Experience of Stack Overflow answerers}{\field{\*\fldinst TC "6 Experience of Stack Overflow answerers" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx4555\cellx5645\cellx6900
{\pard\intbl\ql { Experience}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx4555\cellx5645\cellx6900
{\pard\intbl\ql { Less than a year}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {0.5%}\cell}
\row}
{\trowd\cellx4555\cellx5645\cellx6900
{\pard\intbl\ql {1 \endash  2 years}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {0.5%}\cell}
\row}
{\trowd\cellx4555\cellx5645\cellx6900
{\pard\intbl\ql {3 \endash  5 years}\cell}
{\pard\intbl\qr {30}\cell}
{\pard\intbl\qr {14.9%}\cell}
\row}
{\trowd\cellx4555\cellx5645\cellx6900
{\pard\intbl\ql {5 \endash  10 years}\cell}
{\pard\intbl\qr {58}\cell}
{\pard\intbl\qr {28.9%}\cell}
\row}
{\trowd\cellx4555\cellx5645\cellx6900
{\pard\intbl\ql {More than 10 years}\cell}
{\pard\intbl\qr {111}\cell}
{\pard\intbl\qr {55.2%}\cell}
\row}
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb480 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_survey_code_snippet_frequency}7{\*\bkmkend BMtab_survey_code_snippet_frequency}: Frequency of including code snippets in answers}{\field{\*\fldinst TC "7 Frequency of including code snippets in answers" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Include code snippets}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Very Frequently (81\endash 100% of the time)}\cell}
{\pard\intbl\qr {84}\cell}
{\pard\intbl\qr {42%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Frequently (61\endash 80% of the time)}\cell}
{\pard\intbl\qr {63}\cell}
{\pard\intbl\qr {31%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Occasionally (41\endash 60% of the time)}\cell}
{\pard\intbl\qr {40}\cell}
{\pard\intbl\qr {20%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Rarely (21\endash 40% of the time)}\cell}
{\pard\intbl\qr {11}\cell}
{\pard\intbl\qr {6%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Very Rarely (1\endash 20% of the time)}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\qr {1%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Never (0% of the time)}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {1%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {201}\cell}
{\pard\intbl\qr {100%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b Code Snippets in Answers:} 84 and 63 answerers include code snippets in more than 80% and 60% of their answers respectively. Interestingly, there is one answerer who never include code snippet in his/her answers ({tab:survey\\s\\do5({\fs16 c})ode\\s\\do5({\fs16 s})nippet\\s\\do5({\fs16 f})requency}).\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_survey_snippet_source}6{\*\bkmkend BMfig_survey_snippet_source}: The sources of code snippets in Stack Overflow answers}{\field{\*\fldinst TC "6 The sources of code snippets in Stack Overflow answers" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We asked the remaining 200 participants for the origins of code snippets in their answers. We provided six locations including the answerer\rquote s personal projects, the answerer\rquote s company projects, open source projects, writing the code from scratch, copying and modifying the code from the question, and others (e.g. code that are copied from other questions or answers on Stack Overflow) and we asked them to rate how often they copied the code from these locations. The results are shown in {fig:survey\\s\\do5({\fs16 s})nippet\\s\\do5({\fs16 s})ource}. Looking at the Very Frequently section, we can see that the answerers mainly write new code from scratch (106) or copy and modify the code snippets from the question for each answer (66), while fewer numbers are from other sources including their personal projects (28), their company projects (4), and open source projects (9). Although copying from open source projects is not the most popular choice, the answerers still rely on them sometimes. As shown in the figure, there are 14, 31, and 33 participants who frequently, occasionally, and rarely copied code snippets from open source projects.\par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb142 \fi300 \scaps0\i RQ 1.1 How often are Stack Overflow answerers aware of the outdated code and licensing conflicts when they answer a question on Stack Overflow?} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Outdated Code Snippets:} We asked the answerers if they have ever been notified about outdated code in their answers. 111 participants selected {\i Yes} while the other 89 participants selected {\i No}. However, we found inconsistent results when we asked a follow up question on the frequency of being notified. As displayed in {tab:survey\\s\\do5({\fs16 c})ode\\s\\do5({\fs16 s})nippet\\s\\do5({\fs16 o})utdated}, the number of participants who has {\i Never} been notified about outdated code snippets in their answers drops from 89 to 69.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_survey_code_snippet_outdated}8{\*\bkmkend BMtab_survey_code_snippet_outdated}: Notifications of outdated code snippets in answers}{\field{\*\fldinst TC "8 Notifications of outdated code snippets in answers" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql { Notified of outdated code}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql { Very frequently (81\endash 100% of my answers)}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\qr {1%}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql {Frequently (61\endash 80% of my answers)}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {0.5%}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql {Occasionally (41\endash 60% of my answers)}\cell}
{\pard\intbl\qr {9}\cell}
{\pard\intbl\qr {4.5%}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql {Rarely (21\endash 40% of my answers)}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {8%}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql {Very rarely (1\endash 20% of my answers)}\cell}
{\pard\intbl\qr {103}\cell}
{\pard\intbl\qr {51.5%}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql {Never (0% of my answers)}\cell}
{\pard\intbl\qr {69}\cell}
{\pard\intbl\qr {34.5%}\cell}
\row}
{\trowd\cellx5380\cellx6089\cellx6899
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {200}\cell}
{\pard\intbl\qr {100%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We found that although the answerer have been notified of outdated code in their answers, for 51.5% of them such notifications occur very rarely (only 1\endash 20% of the answers). Only 3 participants reported that they were notified in more than 60% of their answers. This notification to the answerer can be done via several means, such as contacting the author directly, writing a comment saying that the answer is already outdated, down-voting the answer or posting a newer answer. The low percentage of outdated code notifications reflect the experience of high reputation answerers who accumulate the reputation for a long time. Due to the voting mechanism of Stack Overflow, high reputation users usually provide high quality answers to earn up votes from other users. They are careful when posting code snippets in the answer to avoid problems and, vice versa, getting down votes. It would be interesting to compare the findings to Stack Overflow answerers who are newer and have lower reputation. However, we leave it to future work.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_survey_code_snippet_outdated_fix}9{\*\bkmkend BMtab_survey_code_snippet_outdated_fix}: Fixing of outdated code snippets in answers}{\field{\*\fldinst TC "9 Fixing of outdated code snippets in answers" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql { Fixing of outdated code}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql { Very frequently (81\endash 100% of the cases)}\cell}
{\pard\intbl\qr {48}\cell}
{\pard\intbl\qr {36.6%}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql {Frequently (61\endash 80% of the cases)}\cell}
{\pard\intbl\qr {27}\cell}
{\pard\intbl\qr {20.6%}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql {Occasionally (41\endash 60% of the cases)}\cell}
{\pard\intbl\qr {30}\cell}
{\pard\intbl\qr {22.9%}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql {Rarely (21\endash 40% of the cases)}\cell}
{\pard\intbl\qr {11}\cell}
{\pard\intbl\qr {8.4%}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql {Very rarely (1\endash 20% of the cases)}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {6.1%}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql {Never (0% of the cases)}\cell}
{\pard\intbl\qr {7}\cell}
{\pard\intbl\qr {5.3%}\cell}
\row}
{\trowd\cellx5359\cellx6077\cellx6898
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {131}\cell}
{\pard\intbl\qr {100.0%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We then asked 131 participants who have been notified of their outdated code a follow-up question {\i \ldblquote how frequently did you fix your outdated code on Stack Overflow?\rdblquote }. The answers, depicted in {tab:survey\\s\\do5({\fs16 c})ode\\s\\do5({\fs16 s})nippet\\s\\do5({\fs16 o})utdated\\s\\do5({\fs16 f})ix}, show that more than half of them (57.2%) very frequently or frequently fix the outdated code snippets. However, there are 19.8% of the answerers in both groups who rarely, very rarely, or never fix their outdated code.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_survey_license_include}10{\*\bkmkend BMtab_survey_license_include}: Inclusion of software license in answer}{\field{\*\fldinst TC "10 Inclusion of software license in answer" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5769\cellx6899
{\pard\intbl\ql { Include license?}\cell}
{\pard\intbl\qr {Amount}\cell}
\row}
{\trowd\cellx5769\cellx6899
{\pard\intbl\ql { No.}\cell}
{\pard\intbl\qr {197}\cell}
\row}
{\trowd\cellx5769\cellx6899
{\pard\intbl\ql {Yes, in code comment}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx5769\cellx6899
{\pard\intbl\ql {Yes, in text surrounding the code}\cell}
{\pard\intbl\qr {2}\cell}
\row}
{\trowd\cellx5769\cellx6899
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {200}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b License of Code Snippets:} Among the 200 answerers who include code snippets in their answers, 124 answerers are aware that Stack Overflow apply Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0) to content in the posts, including code snippets, while the rest (76) are not. Nevertheless, as shown in {tab:survey\\s\\do5({\fs16 l})icense\\s\\do5({\fs16 i})nclude}, almost all of them (197) reported that they did not include license statement in their code snippets due to several reasons. First, some answerers chose to post only their own code or code that was adapted from the question, hence they are automatically subjected to CC BY-SA 3.0. Second, they copied code from company or open source projects that they knew were permitted to be publicly distributed. Third, some answerers believe that code snippets in their answers are too small to claim any intellectual property on them and fall under fair use\~
[{\field{\*\fldinst{\lang1024 REF BIB_fairuse \\* MERGEFORMAT }}{\fldrslt{fairuse}}}
].\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 While nobody explicitly includes a software license in their snippets, many users include a statement on their profile page that all their answers are under a certain license. For example, a Stack Overflow user includes the following text in his/her profile page.\par
{{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \li512\ri512\fi0 \scaps0\i All code posted by me on Stack Overflow should be considered public domain without copyright. For countries where public domain is not applicable, I hereby grant everyone the right to modify, use and redistribute any code posted by me on Stack Overflow for any purpose. It is provided \ldblquote as-is\rdblquote  without warranty of any kind.} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 Many users either declare their snippets to be public domain, or they grant additional licenses, e.g. Apache 2.0 or MIT/Expat.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_survey_license_check}11{\*\bkmkend BMtab_survey_license_check}: Checking for licensing conflicts with CC BY-SA 3.0}{\field{\*\fldinst TC "11 Checking for licensing conflicts with CC BY-SA 3.0" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Check license conflicts?}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Very Frequently (81\endash 100% of the time)}\cell}
{\pard\intbl\qr {14}\cell}
{\pard\intbl\qr {7%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Frequently (61\endash 80% of the time)}\cell}
{\pard\intbl\qr {7}\cell}
{\pard\intbl\qr {3.5%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Occasionally (41\endash 60% of the time)}\cell}
{\pard\intbl\qr {10}\cell}
{\pard\intbl\qr {5%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Rarely (21\endash 40% of the time)}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {8%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Very rarely (1\endash 20% of the time)}\cell}
{\pard\intbl\qr {15}\cell}
{\pard\intbl\qr {7.5%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Never (0% of the time)}\cell}
{\pard\intbl\qr {138}\cell}
{\pard\intbl\qr {69%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {200}\cell}
{\pard\intbl\qr {100%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We asked the answerers a follow-up question of how frequently they checked for a conflict between software license of the code snippets they copied to their answers and Stack Overflow\rquote s CC BY-SA 3.0. As shown in {tab:survey\\s\\do5({\fs16 l})icense\\s\\do5({\fs16 c})heck}, approximately 69% of answerers did not perform the checking. Nonetheless, there are about 10.5% of the answerers who very frequently or frequently check for licensing conflicts when they copy code snippets to Stack Overflow.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {{\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{framed\} ... \\end\{framed\}}]\par
}}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Open Comments:} We also invited the participants to give a free-form comment regarding their concerns of answering Stack Overflow with code snippets. Besides the one we present earlier in the introduction, these are interesting comments we received.\par
{\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 1.\tab
{\i \ldblquote When I copy code it\rquote s usually short enough to be considered "fair use" but I am not a lawyer or copyright expert so some guidance from Stack Overflow would be helpful. I\rquote d also like the ability to flag/review questions that violate these guidelines.\rdblquote } \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 2.\tab
{\i \ldblquote My only concern, albeit minor, is that I know people blindly copy my code without even understanding what the code does.\rdblquote } \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 3.\tab
{\i \ldblquote The main problem for me/us is outdated code, esp. as old answers have high google rank so that is what people see first, then try and fail. Thats why we\rquote re moving more and more of those examples to knowledge base and docs and rather link to those.\rdblquote } \par
\pard\plain\s46\ql\fi-283\li283\lin283\sb0\sa120\widctlpar\tql\tx283\f0\fs20\sl240\slmult1 \sb50 \li600\fi-300 4.\tab
{\i \ldblquote Lot of the answers are from hobbyist so the quality is poor. Usually they are hacks or workarounds (even MY best answer on Stack Overflow is a workaround).\rdblquote } \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi300 The comments highlight that Stack Overflow users are unsure about the legal implications of copying code, that code is copied without understanding it, and that the quality of code on Stack Overflow is often low.\par
\pard\plain\s5\ql\sb240\sa120\keepn\f0\b\fs24\sl240\slmult1 \sb120 \fi0 3.1.2  The Visitor Survey\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb60 \fi0 We received answers from 89 participants. Two participants never copy code from Stack Overflow so we analysed the answers of the remaining 87 participants.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b General Information: } Twenty four (27%) and twenty one (24%) participants have over 10 years and 5\endash 10 years of experience respectively. There are 19 participants (21%) who have 3\endash 5 years, 18 (20%) who have 1-2 years, and 7 (8%) participants who have less than a year of programming experience.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b Choice for programming solutions: } Stack Overflow is ranked higher than official documentation, online repositories, and books as the resource to look for programming solutions. Developers rely on Stack Overflow answers because they are easy to search for on the web. Moreover, 64% of the participants reuse code snippets from Stack Overflow at least once a week. They copy code from Stack Overflow because they can be found easily from search engine, solve similar problems to their problems, provide helpful context, and offer voting mechanism and accepted answers. \par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb142 \fi300 \scaps0\i RQ 1.2 How often do Stack Overflow visitors experience the outdated code and licensing conflicts when they reuse code in an answer from Stack Overflow?} \par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_visitor_survey_code_problems}12{\*\bkmkend BMtab_visitor_survey_code_problems}: Problems from Stack Overflow code snippets}{\field{\*\fldinst TC "12 Problems from Stack Overflow code snippets" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5713\cellx6899
{\pard\intbl\ql { Problem}\cell}
{\pard\intbl\qr {Amount}\cell}
\row}
{\trowd\cellx5713\cellx6899
{\pard\intbl\ql { Mismatched solutions}\cell}
{\pard\intbl\qr {40}\cell}
\row}
{\trowd\cellx5713\cellx6899
{\pard\intbl\ql {Outdated solutions}\cell}
{\pard\intbl\qr {39}\cell}
\row}
{\trowd\cellx5713\cellx6899
{\pard\intbl\ql {Incorrect solutions}\cell}
{\pard\intbl\qr {28}\cell}
\row}
{\trowd\cellx5713\cellx6899
{\pard\intbl\ql {Buggy code}\cell}
{\pard\intbl\qr {1}\cell}
\row}
} \par
}{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb480 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_visitor_survey_report_problem}13{\*\bkmkend BMtab_visitor_survey_report_problem}: Frequency of reporting the problems to Stack Overflow posts}{\field{\*\fldinst TC "13 Frequency of reporting the problems to Stack Overflow posts" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Report?}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Very Frequently (81\endash 100% of the time)}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {1.8%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Frequently (61\endash 80% of the time)}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {1.8%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Occasionally (41\endash 60% of problematic snippets)}\cell}
{\pard\intbl\qr {3}\cell}
{\pard\intbl\qr {5.3%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Rarely (21\endash 40% of problematic snippets)}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {14.0%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Very rarely (1\endash 20% of problematic snippets)}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\qr {14.0%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Never (0% of problematic snippets)}\cell}
{\pard\intbl\qr {36}\cell}
{\pard\intbl\qr {63.2%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {57}\cell}
{\pard\intbl\qr {100%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 The survey results show that 57 out of 87 Stack Overflow visitors encountered a problem from reusing Stack Overflow code snippets. Ten participants experienced problems for more than 80% of the copied snippets and sixteen participants faced problems for 40\endash 60% of the reused code. As shown in\~{tab:visitor\\s\\do5({\fs16 s})urvey\\s\\do5({\fs16 c})ode\\s\\do5({\fs16 p})roblems}, the problems ranked by frequency include mismatched solutions (40), outdated solutions (39), incorrect solutions (28), and buggy code (1). Sixty-three percent of the participants never report the problems back to Stack Overflow ({tab:visitor\\s\\do5({\fs16 s})urvey\\s\\do5({\fs16 r})eport\\s\\do5({\fs16 p})roblem}). The ways of reporting the problems (22 answers) included down-voting the answer containing the problematic code snippet (8), writing a comment saying that the code has problems (10), contacting the answerers regarding the problems directly (2), and posting a better snippet as new answer on same topic (2).\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_visitor_survey_license_check}14{\*\bkmkend BMtab_visitor_survey_license_check}: Check for licensing conflicts before using Stack Overflow snippets}{\field{\*\fldinst TC "14 Check for licensing conflicts before using Stack Overflow snippets" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { License check?}\cell}
{\pard\intbl\qr {Amount}\cell}
{\pard\intbl\qr {Percent}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Very frequently (81\endash 100% of the time)}\cell}
{\pard\intbl\qr {0}\cell}
{\pard\intbl\qr {0.0%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Frequently (61\endash 80% of the time)}\cell}
{\pard\intbl\qr {7}\cell}
{\pard\intbl\qr {8.1%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Occasionally (41\endash 60% of the time)}\cell}
{\pard\intbl\qr {6}\cell}
{\pard\intbl\qr {6.9%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Rarely (21\endash 40% of the time)}\cell}
{\pard\intbl\qr {6}\cell}
{\pard\intbl\qr {6.9%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Very rarely (1\endash 20% of the time)}\cell}
{\pard\intbl\qr {11}\cell}
{\pard\intbl\qr {12.6%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql {Never (0% of the time)}\cell}
{\pard\intbl\qr {57}\cell}
{\pard\intbl\qr {65.5%}\cell}
\row}
{\trowd\cellx5338\cellx6066\cellx6899
{\pard\intbl\ql { Total}\cell}
{\pard\intbl\qr {87}\cell}
{\pard\intbl\qr {100%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 In addition, 74 out of the 87 (85%) participants are not aware of Stack Overflow CC BY-SA 3.0 license and 62% never give attributions to the Stack Overflow posts they copied the code snippets from. As shown in {tab:visitor\\s\\do5({\fs16 s})urvey\\s\\do5({\fs16 l})icense\\s\\do5({\fs16 c})heck}, we found that 66% of the visitors never check for software licensing conflicts between Stack Overflow code snippets and their projects. Interestingly, 9% of the participants encountered legal issues. Due to the anonymity of the survey, we could not investigate further regarding the legal issues that the participants faced from using Stack Overflow code snippets. To the best of our knowledge, a study of legal problems from reusing Stack Overflow code snippets has never been done before and will be our future work.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {{\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{framed\} ... \\end\{framed\}}]\par
}}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 3.2  RQ2: Online Code Clones\par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb202 \fi0 \scaps0\i To what extent is source code cloned between Stack Overflow and open source projects?} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 The statistics on clones obtained from the merged clone data set are presented in\~{tab:snippets}. Simian and SourcererCC reported clones in 460 snippets, approximately 0.6% of the 72,365 Stack Overflow snippets, associated with 59 Qualitas projects. For the cloned Stack Overflow snippets, the average ratio of cloned code is 53.28% (i.e. the number of cloned lines of the cloned Stack Overflow snippet).\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_snippets}15{\*\bkmkend BMtab_snippets}: Investigated online clone pairs and corresponding snippets and Qualitas projects}{\field{\*\fldinst TC "15 Investigated online clone pairs and corresponding snippets and Qualitas projects" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx1251\cellx2146\cellx3518\cellx4890\cellx6898
{\pard\intbl\ql { Set}\cell}
{\pard\intbl\qr {Pairs}\cell}
{\pard\intbl\qr {Snippets}\cell}
{\pard\intbl\qr {Projects}\cell}
{\pard\intbl\qr {Cloned ratio}\cell}
\row}
{\trowd\cellx1251\cellx2146\cellx3518\cellx4890\cellx6898
{\pard\intbl\ql { Reported clones}\cell}
{\pard\intbl\qr {2,289}\cell}
{\pard\intbl\qr {460}\cell}
{\pard\intbl\qr {59}\cell}
{\pard\intbl\qr {53.28%}\cell}
\row}
{\trowd\cellx1251\cellx2146\cellx3518\cellx4890\cellx6898
{\pard\intbl\ql { TP from manual validation}\cell}
{\pard\intbl\qr {2,063}\cell}
{\pard\intbl\qr {443}\cell}
{\pard\intbl\qr {59}\cell}
{\pard\intbl\qr {54.09%}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 Lastly, during the manual investigation of 2,289 clone pairs, we identified 226 pairs as being accidental clones (NC), i.e.\~false positives. After removing them, the set still contains 2,063 true positive clone pairs between 443 Stack Overflow snippets and 59 Qualitas projects. The average cloned ratio for the true positive clone pairs is 54.09%.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {{\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{framed\} ... \\end\{framed\}}]\par
}}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 3.3  RQ3: Patterns of Online Code Cloning\par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb202 \fi0 \scaps0\i How do online code clones occur?} \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 We performed a manual classification of the 2,289 merged clone pairs by following the classification process in {fig:classification\\s\\do5({\fs16 p})rocess}. The classification results are shown in {tab:classification\\s\\do5({\fs16 g})ood\\s\\do5({\fs16 o})} and explained in the following.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_classification_good_o}16{\*\bkmkend BMtab_classification_good_o}: Classifications of online clone pairs.}{\field{\*\fldinst TC "16 Classifications of online clone pairs." \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx3363\cellx3778\cellx4088\cellx4503\cellx4918\cellx5544\cellx5854\cellx6269\cellx6895
{\pard\intbl\ql { Set}\cell}
{\pard\intbl\qr {QS}\cell}
{\pard\intbl\qr {SQ}\cell}
{\pard\intbl\qr {EX}\cell}
{\pard\intbl\qr {UD}\cell}
{\pard\intbl\qr {BP}\cell}
{\pard\intbl\qr {IN}\cell}
{\pard\intbl\qr {NC}\cell}
{\pard\intbl\qr {Total}\cell}
\row}
{\trowd\cellx3363\cellx3778\cellx4088\cellx4503\cellx4918\cellx5544\cellx5854\cellx6269\cellx6895
{\pard\intbl\ql { Before consolidation}\cell}
{\pard\intbl\qr {247}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {197}\cell}
{\pard\intbl\qr {107}\cell}
{\pard\intbl\qr {1,495}\cell}
{\pard\intbl\qr {16}\cell}
{\pard\intbl\qr {226}\cell}
{\pard\intbl\qr {2,289}\cell}
\row}
{\trowd\cellx3363\cellx3778\cellx4088\cellx4503\cellx4918\cellx5544\cellx5854\cellx6269\cellx6895
{\pard\intbl\ql {After consolidation}\cell}
{\pard\intbl\qr {153}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\qr {109}\cell}
{\pard\intbl\qr {65}\cell}
{\pard\intbl\qr {216}\cell}
{\pard\intbl\qr {9}\cell}
{\pard\intbl\qr {53}\cell}
{\pard\intbl\qr {606}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b QS: Qualitas {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} Stack Overflow.} We found 247 online clone pairs with evidence of cloning from Qualitas projects to Stack Overflow. However, we observed that, in some cases, a cloned code snippet on Stack Overflow matched with more than one code snippet in Qualitas projects because of code cloning inside Qualitas projects themselves. To avoid double counting of such online clones, we consolidated multiple clone pairs having the same Stack Overflow snippet, starting line, and ending line into a single clone pair. We finally obtained 153 QS pairs ({tab:classification\\s\\do5({\fs16 g})ood\\s\\do5({\fs16 o})}) having unique Stack Overflow code snippets and associated with 23 Qualitas projects listed in {tab:qs\\s\\do5({\fs16 q})ualitas\\s\\do5({\fs16 p})rojects}. The most cloned project is {\f2 hibernate} with 23 clone pairs, followed by {\f2 eclipse} (21 pairs), {\f2 jung2} (19 pairs), {\f2 spring} (17 pairs), and {\f2 jfreechart} (13 pairs). The clones are used as examples and are very similar to their original Qualitas code with limited modifications. Most of them have a statement in the Stack Overflow post saying that the code is \ldblquote copied\rdblquote , \ldblquote borrowed\rdblquote  or \ldblquote modified\rdblquote  from a specific file or class in a Qualitas project. For example, according to the motivating example in {fig:before-after}, we found evidence in the Stack Overflow Post 22315734 saying that {\i \ldblquote Actually, you can learn how to compare in Hadoop from WritableComparator. Here is an example that borrows some ideas from it.\rdblquote }\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_qs_qualitas_projects}17{\*\bkmkend BMtab_qs_qualitas_projects}: Qualitas projects associated with QS and UD online clone pairs}{\field{\*\fldinst TC "17 Qualitas projects associated with QS and UD online clone pairs" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\clmgf\cellx3350\clmrg\cellx4262\clmgf\cellx5987\clmrg\cellx6899
{\pard\intbl\qc { QS\cell}
{\pard\intbl}\cell}
{\pard\intbl\qc {UD\cell}
{\pard\intbl}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql { Project}\cell}
{\pard\intbl\qr {Pairs}\cell}
{\pard\intbl\ql {Project}\cell}
{\pard\intbl\qr {Pairs}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql { hibernate}\cell}
{\pard\intbl\qr {23}\cell}
{\pard\intbl\ql {netbeans}\cell}
{\pard\intbl\qr {11}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {eclipse}\cell}
{\pard\intbl\qr {21}\cell}
{\pard\intbl\ql {eclipse}\cell}
{\pard\intbl\qr {8}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jung2}\cell}
{\pard\intbl\qr {19}\cell}
{\pard\intbl\ql {jstock}\cell}
{\pard\intbl\qr {5}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {spring}\cell}
{\pard\intbl\qr {17}\cell}
{\pard\intbl\ql {compiere}\cell}
{\pard\intbl\qr {5}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jfreechart}\cell}
{\pard\intbl\qr {13}\cell}
{\pard\intbl\ql {ireport}\cell}
{\pard\intbl\qr {4}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {hadoop}\cell}
{\pard\intbl\qr {10}\cell}
{\pard\intbl\ql {jmeter}\cell}
{\pard\intbl\qr {4}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {tomcat}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\ql {jung2}\cell}
{\pard\intbl\qr {3}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {log4j}\cell}
{\pard\intbl\qr {8}\cell}
{\pard\intbl\ql {jhotdraw}\cell}
{\pard\intbl\qr {3}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {struts2}\cell}
{\pard\intbl\qr {5}\cell}
{\pard\intbl\ql {c-jdbc}\cell}
{\pard\intbl\qr {3}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {weka}\cell}
{\pard\intbl\qr {4}\cell}
{\pard\intbl\ql {log4j}\cell}
{\pard\intbl\qr {3}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {lucene}\cell}
{\pard\intbl\qr {4}\cell}
{\pard\intbl\ql {wct}\cell}
{\pard\intbl\qr {2}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {poi}\cell}
{\pard\intbl\qr {3}\cell}
{\pard\intbl\ql {hibernate}\cell}
{\pard\intbl\qr {2}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {junit}\cell}
{\pard\intbl\qr {3}\cell}
{\pard\intbl\ql {tomcat}\cell}
{\pard\intbl\qr {2}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jstock}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\ql {spring}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jgraph}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\ql {rssowl}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jboss}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\ql {mvnforum}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jasperreports}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\ql {jfreechart}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {compiere}\cell}
{\pard\intbl\qr {2}\cell}
{\pard\intbl\ql {jboss}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {jgrapht}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\ql {hadoop}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {itext}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\ql {geotools}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {c-jdbc}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\ql {freemind}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {ant}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\ql {findbugs}\cell}
{\pard\intbl\qr {1}\cell}
\row}
{\trowd\cellx3350\cellx4262\cellx5987\cellx6899
{\pard\intbl\ql {antlr4}\cell}
{\pard\intbl\qr {1}\cell}
{\pard\intbl\ql {cayenne}\cell}
{\pard\intbl\qr {1}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We did an analysis of the time it took for the clone to appear from Qualitas projects to Stack Overflow. The clone ages were calculated by counting the number of month difference from the dates of each Qualitas project to the date the answers were posted on Stack Overflow as shown in\~{\field{\*\fldinst{\lang1024 REF BMfig_boxplotcloneage \\* MERGEFORMAT }}{\fldrslt{?}}}. We found that, on average, it took the clones around 2 years since they appeared in Qualitas projects to appear on Stack Overflow answers. Some of the clones appeared on Stack Overflow almost at the same time as the original, while the oldest clones took around 5 years.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_boxplotcloneage}7{\*\bkmkend BMfig_boxplotcloneage}: Age of QS online code clones.}{\field{\*\fldinst TC "7 Age of QS online code clones." \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b SQ: Stack Overflow {{\field{\*\fldinst{ EQ {\u8594*}}}{\fldrslt }}
} Qualitas.} We found one pair with evidence of cloning from Stack Overflow post ID 698283 to {\fs18 {\f3 POIUtils.java}} in {\f2 jstock} project. The user who asked the question on Stack Overflow is an author of {\f2 jstock}. The question is about determining the right method to call among 7 overloading methods of {\fs18 {\f3 setCellValue}} during runtime. We could not find evidence of copying or attribution to Stack Overflow in {\f2 jstock}. However, considering that the 25 lines of code of {\fs18 {\f3 findMethodToInvoke}} method depicted in {fig:jstock\\s\\do5({\fs16 c})ode} in Stack Overflow is very similar to the code in {\f2 jstock} including comments, it is almost certain that the two code snippets form a clone pair. In addition, the Stack Overflow answer was posted on March 30, 2009, while the code in {\fs18 {\f3 POIUtils}} class in {\f2 jstock} was committed to GitHub on the next day of March 31, 2009.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{lstlisting\} ... \\end\{lstlisting\}}]\par
}\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_jstock_code}8{\*\bkmkend BMfig_jstock_code}: The {\fs18 {\f3 findMethodToInvoke}} that is found to be copied from Stack Overflow post 698283 to {\fs18 {\f3 POIUtils}} class in {\f2 jstock}.}{\field{\*\fldinst TC "8 The {\fs18 {\f3 findMethodToInvoke}} that is found to be copied from Stack Overflow post 698283 to {\fs18 {\f3 POIUtils}} class in {\f2 jstock}." \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 This very low number of SQ clone pair is very likely due to the age of the Qualitas corpus as another study\~
[{\field{\*\fldinst{\lang1024 REF BIB_An2017 \\* MERGEFORMAT }}{\fldrslt{An2017}}}
] showed the presence of clones from Stack Overflow in newer open source data sets. This is expected and comes from our experimental design since we are more interested in cloning from Qualitas to Stack Overflow.\par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_ex_sources}9{\*\bkmkend BMfig_ex_sources}: Original sources of EX clone pairs}{\field{\*\fldinst TC "9 Original sources of EX clone pairs" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 {\b EX: External Sources.} We found 197 clone pairs from external sources to Stack Overflow. After consolidating duplicated SO snippets due to multiple intra-clone instances in Qualitas, we obtained 109 EX pairs. We found evidence of copying from an external source to both Stack Overflow and Qualitas in 49 pairs. Each of the pairs contains statement(s) pointing to the original external location of the cloned code in Qualitas and Stack Overflow. In addition, we found evidence of copying from an external source to Stack Overflow, but not in Qualitas, in 60 pairs. Our analysis shows that the external sources fall into six groups as displayed in {fig:ex\\s\\do5({\fs16 s})ources}. There are 63 EX online clone pairs copied from source code of Java SDK (e.g. {\f2 java.util}, {\f2 javax.swing}, {\f2 javax.servlet}), 18 pairs from websites, 14 pairs from open source systems not in Qualitas (e.g. {\f2 Mozilla Rhino}), 10 pairs from Java official documentations from Sun Microsystems or Oracle, 3 pairs from books, and 1 pair from a company project. For example, Stack Overflow Post 9549009 contains a code comment saying {\i \ldblquote Copied shamelessly from org.bouncycastle.crypto.generators.PKCS5S2ParametersGenerator\rdblquote } which is an open source project not included in the Qualitas corpus. Post 92962 includes a {\fs18 {\f3 VerticalLabelUI}} class with a license statement showing that it is developed by a private company called {\f2 Sapient}. Post 12879764 has a text saying {\i \ldblquote Code modified and cleaned from the original at Filthy Rich Clients.\rdblquote } which is a book for developing animated and graphical effects for desktop Java applications. Another example is a copy of code from a website in post 15260207. The text surrounding source code reads \ldblquote {\i I basically stole this from the web and modified it slightly... You can see the original post here ({\f3 http://www.java2s.com/Code/Java/Swing-JFC/DragListDemo.htm}).}\rdblquote . Interestingly, the code is actually a copy from Sun Microsystems.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 These findings complement a study of clones between software projects\~
[{\field{\*\fldinst{\lang1024 REF BIB_Svajlenko2014 \\* MERGEFORMAT }}{\fldrslt{Svajlenko2014}}}
]. We found that cloning can also happen among different sources on the Internet just like software projects. The are 18 clone pairs that originated from programming websites including {\f3 www.java2s.com} and {\f3 exampledepot.com}. Moreover, there is one snippet which comes from a research website. We found that a snippet to generate graphical {\i Perlin noise} is copied from NYU Media Research Lab ({\f3 http://mrl.nyu.edu/~perlin/noise/}) website and is used in both Stack Overflow answer and the {\f2 aoi} project with attribution. \par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b UD: Unknown Direction.} We found 107 online clone pairs, reduced to 65 pairs after consolidating the clones, with no evidence of cloning between Qualitas and Stack Overflow but with a high code similarity that suggests cloning. The most cloned project is {\f2 netbeans} with 11 clone pairs. Most of the clones are a large chunk of code handling GUI components. Although these GUI clones might be auto-generated by IDEs, we did not find any evidence. The second most cloned project is {\f2 eclipse} (8 pairs), followed by {\f2 jstock} (5 pairs), a free stock market software, and {\f2 compiere}, a customer relationship management (CRM) system.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b BP: Boiler-Plate.} There were a large amount of boiler-plate clone pairs found in this study. We observed 1,495 such clone pairs and 216 after consolidation. The BP clone pairs account for 65% of all clone pairs we classified. The majority of them are {\fs18 {{\f3 equals()}}} methods.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b IN: Inheritance/interface.} There were 16 clone pairs, 9 pairs after consolidation, found to be similar because they implement the same interface or inherit from the same class. An example is the two implementations of a custom data type which implements {\fs18 {\f3 UserType}}. They share similar {\fs18 {\f3 @Override}} methods of {\fs18 {\f3 deepCopy}}, {\fs18 {\f3 isMutable}}, {\fs18 {\f3 assemble}}, {\fs18 {\f3 disassemble}}, and {\fs18 {\f3 replace}}.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {\b NC: Not Clones.} There were 226 non-clone pairs, 53 after consolidation. Mainly, they are false positive clones caused by code normalisation and false type-3 clones from SourcererCC. Examples of the NC clone instances include {\fs18 {\f3 finally}} or {\fs18 {\f3 try-catch}} clauses that were accidentally the same due to their very small sizes, and similar {\fs18 {\f3 switch-case}} statements.\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi300 {{\par
\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \fi0 \qc [Sorry. Ignored {\plain\f3\\begin\{framed\} ... \\end\{framed\}}]\par
}}\pard\plain\s4\ql\sb240\sa120\keepn\f0\b\fs32\sl240\slmult1 \sb120 \fi0 3.4  RQ4: Outdated Online Code Clones\par
{\i \pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb202 \fi0 \scaps0\i Are online code clones up-to-date compared to their counterparts in the original projects?} \par
{\pard\plain\s31\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 \par
\pard\plain\s9\qc\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0  \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Figure {\*\bkmkstart BMfig_outdated}10{\*\bkmkend BMfig_outdated}: Outdated QS online clone pairs group by projects}{\field{\*\fldinst TC "10 Outdated QS online clone pairs group by projects" \\f f}{\fldrslt }}\par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We discovered 100 outdated online clone pairs out of 153 pairs. As shown in {fig:outdated}, {\f2 hibernate} has the highest number of 19 outdated pairs, followed by 14 from {\f2 spring}, 13 from {\f2 eclipse}, and 9 from {\f2 hadoop}. Besides the two examples of outdated code in {\fs18 {{\f3 WritableComparator}}} and {\fs18 {{\f3 StringUtils}}} class from {\f2 hadoop} shown in {fig:before-after} and {fig:before-after\\s\\do5({\fs16 2})}, we also found a few outdated code elements which contained a large amount of modifications. For example, the code snippet in Stack Overflow post 23520731 is a copy of {\fs18 {{\f3 SchemaUpdate.java}}} in {\f2 hibernate}. The code has been heavily modified on February 5, 2016.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_mod_types}18{\*\bkmkend BMtab_mod_types}: Six code modification types found when comparing the outdated clone pairs to their latest versions}{\field{\*\fldinst TC "18 Six code modification types found when comparing the outdated clone pairs to their latest versions" \\f t}{\fldrslt }}\par
{\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 \par
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql { Modification}\cell}
{\pard\intbl\qr {Occurrences}\cell}
\row}
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql { Statement modification}\cell}
{\pard\intbl\qr {50}\cell}
\row}
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql {Statement addition}\cell}
{\pard\intbl\qr {28}\cell}
\row}
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql {Statement removal}\cell}
{\pard\intbl\qr {18}\cell}
\row}
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql {Method signature change}\cell}
{\pard\intbl\qr {16}\cell}
\row}
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql {Method rewriting}\cell}
{\pard\intbl\qr {15}\cell}
\row}
{\trowd\cellx5162\cellx6899
{\pard\intbl\ql {File deletion}\cell}
{\pard\intbl\qr {14}\cell}
\row}
} \par
}\pard\plain\s0\qj\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi300 We analysed code modifications which made Stack Overflow code outdated by going though commits and git blame information. The six code modification types found in the 100 outdated online clone pairs are summarised in {tab:mod\\s\\do5({\fs16 t})ypes}. They include statement addition, statement modification, statement removal, method rewriting, API change (changing in method signature), and file deletion. We occasionally found multiple code modifications applied to one clone pair at the same time but at a different location. The most often code change found is statement modification (50 occurrences), followed by statement addition (28 occurrences), statement removal (18 occurrences), change of method signature, i.e.\~API change (16 occurrences), and method rewriting (15 occurrences). Moreover, in the 101 outdated pairs, we found 15 \ldblquote dead\rdblquote  snippets. These snippets cannot be located in the latest version of the projects. For example, the snippet in Stack Overflow post 3758110, a copy of {\fs18 {{\f3 DefaultAnnotationHandlerMapping.java}}} in {\f2 spring}, was deleted in the commit {\fs18 {{\f3 02a4473c62d8240837bec297f0a1f3cb67ef8a7b}}} by Chris Beams on January 20, 2012, two years after it was posted.\par
{\pard\plain\s32\qc\sb120\sa0\keep\widctlpar\f0\fs20\sl240\slmult1 \sb240 \fi0 \par
\pard\plain\s30\ql\sb120\sa120\keep\widctlpar\f0\sl240\slmult1 \fi0 {Table {\*\bkmkstart BMtab_stale_code_details}19{\*\bkmkend BMtab_stale_code_details}: Examples of the outdated QS online clones}{\field{\*\fldinst TC "19 Examples of the outdated QS online clones" \\f t}{\fldrslt }}\par
{